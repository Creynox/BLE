// <auto-generated />
using System;
using BLE.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BLE.Data.Migrations
{
    [DbContext(typeof(BLEDbContext))]
    [Migration("20251029122304_AddStsTest")]
    partial class AddStsTest
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("BLE.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BLE.Domain.Entities.EtlFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ImportedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EtlFiles");
                });

            modelBuilder.Entity("BLE.Domain.Entities.EtlLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ColumnName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("EtlFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RowIndex")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SheetName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("EtlLogs");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Formel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ausdruck")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EinheitErgebnis")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GueltigAb")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PruefverfahrenId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ValidierungSql")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Formeln");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Grenzwert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bedingung")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Einheit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GueltigAb")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MaxWert")
                        .HasColumnType("TEXT");

                    b.Property<string>("Merkmal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MinWert")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PruefverfahrenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Scope")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("global");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Grenzwerte");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Kornfraktion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("AnteilPercent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("DurchgangPercent")
                        .HasColumnType("TEXT");

                    b.Property<int>("FraktionIndex")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("KorngroesseMaxMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("KorngroesseMinMm")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("MasseG")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProbeId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PruefverfahrenId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kornfraktionen");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Kunde", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Adresse")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kunden");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Messung", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Einheit")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("IstWert")
                        .HasColumnType("TEXT");

                    b.Property<string>("Merkmal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Messunsicherheit")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Messzeitpunkt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProbeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pruefer")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PruefverfahrenId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProbeId")
                        .HasDatabaseName("ix_messung_probe");

                    b.HasIndex("PruefverfahrenId")
                        .HasDatabaseName("ix_messung_pruef");

                    b.ToTable("Messungen");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Normwerk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Bemerkung")
                        .HasColumnType("TEXT");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("GueltigAb")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GueltigBis")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuelleUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Normwerke");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Probe", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Entnahmedatum")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Feuchte")
                        .HasColumnType("TEXT");

                    b.Property<string>("Materialtyp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("asphalt");

                    b.Property<string>("Probencode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Produkt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProjektId")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("Temperatur")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Werk")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Probencode")
                        .IsUnique();

                    b.ToTable("Proben", t =>
                        {
                            t.HasCheckConstraint("ck_probe_materialtyp", "materialtyp IN ('asphalt','beton')");
                        });
                });

            modelBuilder.Entity("BLE.Domain.Entities.Projekt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Enddatum")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("KundeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Ort")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Startdatum")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projekte");
                });

            modelBuilder.Entity("BLE.Domain.Entities.Pruefverfahren", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Beschreibung")
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("NormwerkId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Titel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Pruefverfahren");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsErgebnis", b =>
                {
                    b.Property<Guid>("StsTestId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("GrenzwerteOk")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("KornformIndex")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("S1")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("S2")
                        .HasColumnType("TEXT");

                    b.HasKey("StsTestId");

                    b.ToTable("StsErgebnisse");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsKochversuch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EinwaageVorKochen")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("Kochzeit")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RueckwaageNachKochen")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StsTestId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StsTestId")
                        .IsUnique();

                    b.ToTable("StsKochversuche");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsKornform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("EinwaageGesamt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("EinwaageSchlechtGeformt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StsTestId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StsTestId")
                        .IsUnique();

                    b.ToTable("StsKornformen");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsSiebanalyse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DurchgangProzent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Einwaage")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RueckgangProzent")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Rueckwaage")
                        .HasColumnType("TEXT");

                    b.Property<string>("SiebBezeichnung")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StsTestId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("StsTestId", "SiebBezeichnung")
                        .IsUnique();

                    b.ToTable("StsSiebanalysen");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Entnahmedatum")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("GesamtEinwaage")
                        .HasColumnType("TEXT");

                    b.Property<string>("Materialtyp")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<string>("Probencode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Produkt")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Werk")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("StsTests", t =>
                        {
                            t.HasCheckConstraint("ck_ststest_materialtyp", "materialtyp IN ('Asphalt','Beton')");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsErgebnis", b =>
                {
                    b.HasOne("BLE.Domain.Entities.StsTest", "StsTest")
                        .WithOne("Ergebnis")
                        .HasForeignKey("BLE.Domain.Entities.StsErgebnis", "StsTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StsTest");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsKochversuch", b =>
                {
                    b.HasOne("BLE.Domain.Entities.StsTest", "StsTest")
                        .WithOne("Kochversuch")
                        .HasForeignKey("BLE.Domain.Entities.StsKochversuch", "StsTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StsTest");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsKornform", b =>
                {
                    b.HasOne("BLE.Domain.Entities.StsTest", "StsTest")
                        .WithOne("Kornform")
                        .HasForeignKey("BLE.Domain.Entities.StsKornform", "StsTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StsTest");
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsSiebanalyse", b =>
                {
                    b.HasOne("BLE.Domain.Entities.StsTest", "StsTest")
                        .WithMany("Siebanalysen")
                        .HasForeignKey("StsTestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StsTest");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("BLE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("BLE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BLE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("BLE.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BLE.Domain.Entities.StsTest", b =>
                {
                    b.Navigation("Ergebnis");

                    b.Navigation("Kochversuch");

                    b.Navigation("Kornform");

                    b.Navigation("Siebanalysen");
                });
#pragma warning restore 612, 618
        }
    }
}
